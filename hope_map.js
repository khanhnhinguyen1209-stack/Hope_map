class HopeMap {
    constructor() {
        this.map = null;
        this.currentMood = null;
        this.currentChatRoom = null;
        this.userLocation = JSON.parse(localStorage.getItem('hopeMapUserLocation')) || null;
        this.markerLayer = null;
        this.sampleChatMessages = {};

        // T·ªça ƒë·ªô ch√≠nh x√°c h∆°n cho c√°c qu·∫≠n/huy·ªán TP.HCM
        this.districtCoordinates = {
            'quan1': [10.7756, 106.7019],       // Trung t√¢m Qu·∫≠n 1 (B·∫øn Th√†nh)
            'quan3': [10.7821, 106.6862],       // Trung t√¢m Qu·∫≠n 3 (C√¥ng vi√™n L√™ VƒÉn T√°m)
            'quan4': [10.7649, 106.7050],       // Trung t√¢m Qu·∫≠n 4 (C·∫ßu K√™nh T·∫ª)
            'quan5': [10.7543, 106.6664],       // Trung t√¢m Qu·∫≠n 5 (Ch·ª£ L·ªõn)
            'quan6': [10.7464, 106.6492],       // Trung t√¢m Qu·∫≠n 6 (C√¥ng vi√™n Ph√∫ L√¢m)
            'quan7': [10.7314, 106.7243],       // Trung t√¢m Qu·∫≠n 7 (Ph√∫ M·ªπ H∆∞ng)
            'quan8': [10.7243, 106.6286],       // Trung t√¢m Qu·∫≠n 8 (C·∫ßu Ch·ªØ Y)
            'quan10': [10.7679, 106.6664],      // Trung t√¢m Qu·∫≠n 10 (B·ªánh vi·ªán Ch·ª£ R·∫´y)
            'quan11': [10.7639, 106.6433],      // Trung t√¢m Qu·∫≠n 11 (C√¥ng vi√™n L√™ Th·ªã Ri√™ng)
            'quan12': [10.8633, 106.6544],      // Trung t√¢m Qu·∫≠n 12 (C√¥ng vi√™n ph·∫ßn m·ªÅm Quang Trung)
            'binhThanh': [10.8011, 106.6981],   // Trung t√¢m B√¨nh Th·∫°nh (C·∫ßu S√†i G√≤n)
            'goVap': [10.8387, 106.6653],       // Trung t√¢m G√≤ V·∫•p (C√¥ng vi√™n Gia ƒê·ªãnh)
            'tanBinh': [10.7972, 106.6453],     // Trung t√¢m T√¢n B√¨nh (S√¢n bay T√¢n S∆°n Nh·∫•t)
            'tanPhu': [10.7905, 106.6281],      // Trung t√¢m T√¢n Ph√∫ (C√¥ng vi√™n T√¢n Ph√∫)
            'phuNhuan': [10.7992, 106.6753],    // Trung t√¢m Ph√∫ Nhu·∫≠n (C√¥ng vi√™n Gia ƒê·ªãnh)
            'thuDuc': [10.8497, 106.7717],      // Trung t√¢m Th·ªß ƒê·ª©c (ƒê·∫°i h·ªçc Qu·ªëc gia)
            'binhTan': [10.7656, 106.6033],     // Trung t√¢m B√¨nh T√¢n (Aeon Mall B√¨nh T√¢n)
            'nhaBe': [10.6967, 106.7967],       // Trung t√¢m Nh√† B√® (C·∫£ng Hi·ªáp Ph∆∞·ªõc)
            'binhChanh': [10.7200, 106.5667],   // Trung t√¢m B√¨nh Ch√°nh (Th·ªã tr·∫•n T√¢n T√∫c)
            'cuChi': [10.9733, 106.4933],       // Trung t√¢m C·ªß Chi (ƒê·ªãa ƒë·∫°o C·ªß Chi)
            'hocMon': [10.8794, 106.5953],      // Trung t√¢m H√≥c M√¥n (Ch·ª£ H√≥c M√¥n)
            'canGio': [10.4147, 106.9667],      // Trung t√¢m C·∫ßn Gi·ªù (Th·ªã tr·∫•n C·∫ßn Th·∫°nh)
            'other': [10.8231, 106.6297],       // Trung t√¢m TP.HCM (Nh√† th·ªù ƒê·ª©c B√†)
            'online': [10.8231, 106.6297],
            'allDistricts': [10.8231, 106.6297]
        };

        this.loadSampleData();
    }

    initializeMap() {
        setTimeout(() => {
            const mapElement = document.getElementById('hope-map');
            if (mapElement && !this.map) {
                this.map = L.map('hope-map').setView([10.8231, 106.6297], 12);

                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '¬© OpenStreetMap contributors'
                }).addTo(this.map);

                // Th√™m layer control
                this.addLayerControl();

                // Kh√¥i ph·ª•c v·ªã tr√≠ ng∆∞·ªùi d√πng n·∫øu c√≥
                if (this.userLocation) {
                    this.showUserLocation(this.userLocation[0], this.userLocation[1]);
                } else {
                    this.locateUser();
                }

                this.addDynamicMarkers();
                
                // Th√™m n√∫t reset d·ªØ li·ªáu
                this.addResetButton();
            } else if (this.map) {
                setTimeout(() => {
                    this.map.invalidateSize();
                }, 100);
            }
        }, 100);
    }

    addLayerControl() {
        if (!this.map) return;

        // Th√™m c√°c base layer kh√°c (n·∫øu c·∫ßn)
        const satelliteLayer = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
            attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'
        });

        const baseLayers = {
            "B·∫£n ƒë·ªì ƒë∆∞·ªùng": L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'),
            "·∫¢nh v·ªá tinh": satelliteLayer
        };

        L.control.layers(baseLayers).addTo(this.map);
    }

    locateUser() {
        if (navigator.geolocation) {
            // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang ƒë·ªãnh v·ªã
            this.showLocatingMessage();

            navigator.geolocation.getCurrentPosition(
                (pos) => {
                    const { latitude, longitude } = pos.coords;
                    this.userLocation = [latitude, longitude];
                    localStorage.setItem('hopeMapUserLocation', JSON.stringify(this.userLocation));
                    this.showUserLocation(latitude, longitude);
                    this.showLocationAccuracy(pos.coords.accuracy);
                },
                (err) => {
                    console.warn("‚ùå Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠:", err.message);
                    this.userLocation = [10.8231, 106.6297];
                    this.showUserLocation(10.8231, 106.6297);
                    this.showLocationError();
                },
                {
                    enableHighAccuracy: true,
                    timeout: 15000,
                    maximumAge: 60000
                }
            );
        } else {
            alert("Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ ƒë·ªãnh v·ªã GPS");
        }
    }

    showLocatingMessage() {
        const locatingDiv = document.createElement('div');
        locatingDiv.className = 'fixed top-4 left-1/2 transform -translate-x-1/2 bg-blue-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
        locatingDiv.innerHTML = `
            <div class="flex items-center space-x-2">
                <span class="animate-spin">üîÑ</span>
                <span>ƒêang ƒë·ªãnh v·ªã v·ªã tr√≠ c·ªßa b·∫°n...</span>
            </div>
        `;
        locatingDiv.id = 'locating-message';
        document.body.appendChild(locatingDiv);
    }

    showLocationAccuracy(accuracy) {
        // X√≥a th√¥ng b√°o ƒëang ƒë·ªãnh v·ªã
        const locatingMsg = document.getElementById('locating-message');
        if (locatingMsg) locatingMsg.remove();

        if (accuracy > 100) {
            const accuracyDiv = document.createElement('div');
            accuracyDiv.className = 'fixed top-4 left-1/2 transform -translate-x-1/2 bg-yellow-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
            accuracyDiv.innerHTML = `
                <div class="flex items-center space-x-2">
                    <span>‚ö†Ô∏è</span>
                    <span>ƒê·ªô ch√≠nh x√°c: ~${Math.round(accuracy)}m</span>
                </div>
            `;
            document.body.appendChild(accuracyDiv);
            
            setTimeout(() => {
                if (document.body.contains(accuracyDiv)) {
                    document.body.removeChild(accuracyDiv);
                }
            }, 5000);
        }
    }

    showLocationError() {
        const locatingMsg = document.getElementById('locating-message');
        if (locatingMsg) locatingMsg.remove();

        const errorDiv = document.createElement('div');
        errorDiv.className = 'fixed top-4 left-1/2 transform -translate-x-1/2 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
        errorDiv.innerHTML = `
            <div class="flex items-center space-x-2">
                <span>‚ùå</span>
                <span>Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠. S·ª≠ d·ª•ng v·ªã tr√≠ m·∫∑c ƒë·ªãnh.</span>
            </div>
        `;
        document.body.appendChild(errorDiv);
        
        setTimeout(() => {
            if (document.body.contains(errorDiv)) {
                document.body.removeChild(errorDiv);
            }
        }, 5000);
    }

    showUserLocation(lat, lng) {
        if (!this.map) return;

        // X√≥a marker c≈© n·∫øu c√≥
        if (this.userMarker) {
            this.map.removeLayer(this.userMarker);
        }

        this.userMarker = L.marker([lat, lng], {
            icon: L.divIcon({
                className: 'user-location-marker',
                html: '<div class="w-6 h-6 bg-blue-500 border-2 border-white rounded-full shadow-lg animate-pulse"></div>',
                iconSize: [24, 24],
                iconAnchor: [12, 12]
            })
        }).addTo(this.map);

        // Th√™m v√≤ng tr√≤n ƒë·ªô ch√≠nh x√°c
        if (this.accuracyCircle) {
            this.map.removeLayer(this.accuracyCircle);
        }

        this.userMarker.bindPopup(`
            <div class="text-center p-2">
                <strong>üìç V·ªã tr√≠ c·ªßa b·∫°n</strong><br>
                <small>${lat.toFixed(6)}, ${lng.toFixed(6)}</small><br>
                <button onclick="window.hopeMap.recenterMap()" 
                        class="mt-2 bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded text-sm">
                    üîç Thu ph√≥ng v·ªÅ ƒë√¢y
                </button>
            </div>
        `).openPopup();

        this.map.setView([lat, lng], 13);
    }

    recenterMap() {
        if (this.userLocation && this.map) {
            this.map.setView(this.userLocation, 15);
        }
    }

    async geocodeAddress(address) {
        try {
            // Th√™m t·ª´ kh√≥a TP.HCM ƒë·ªÉ tƒÉng ƒë·ªô ch√≠nh x√°c
            const searchQuery = address.includes('H·ªì Ch√≠ Minh') || address.includes('TP.HCM') 
                ? address 
                : `${address}, H·ªì Ch√≠ Minh, Vi·ªát Nam`;
            
            const response = await fetch(
                `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(searchQuery)}&limit=1&countrycodes=vn`
            );
            
            if (!response.ok) throw new Error('Network response was not ok');
            
            const data = await response.json();
            if (data && data.length > 0) {
                console.log(`üìç Geocoding th√†nh c√¥ng: ${address} -> ${data[0].lat}, ${data[0].lon}`);
                return [parseFloat(data[0].lat), parseFloat(data[0].lon)];
            }
            console.warn(`‚ùå Kh√¥ng t√¨m th·∫•y t·ªça ƒë·ªô cho: ${address}`);
            return null;
        } catch (error) {
            console.error('L·ªói geocoding:', error);
            return null;
        }
    }

    async addMarkerWithAddress(data, type) {
    if (!this.map || !this.markerLayer) return;

    let lat, lng;
    let addressUsed = '';

    // ∆Øu ti√™n: 1. Geocoding ƒë·ªãa ch·ªâ c·ª• th·ªÉ, 2. T·ªça ƒë·ªô qu·∫≠n/huy·ªán, 3. T·ªça ƒë·ªô ng·∫´u nhi√™n
    if (data.address && data.address.trim()) {
        const coords = await this.geocodeAddress(data.address);
        if (coords) {
            [lat, lng] = coords;
            addressUsed = data.address;
        }
    }

    // N·∫øu geocoding th·∫•t b·∫°i, s·ª≠ d·ª•ng t·ªça ƒë·ªô qu·∫≠n/huy·ªán
    if (!lat && data.area && this.districtCoordinates[data.area]) {
        [lat, lng] = this.districtCoordinates[data.area];
        addressUsed = this.getDistrictName(data.area);
    } else if (!lat && data.district && this.districtCoordinates[data.district]) {
        [lat, lng] = this.districtCoordinates[data.district];
        addressUsed = this.getDistrictName(data.district);
    }

    // Fallback: t·ªça ƒë·ªô ng·∫´u nhi√™n trong TP.HCM
    if (!lat) {
        lat = 10.75 + Math.random() * 0.15;
        lng = 106.60 + Math.random() * 0.15;
        addressUsed = 'TP.HCM';
    }

    // üé® Ch·ªçn m√†u marker theo lo·∫°i
    const color = 
        type === 'helper' 
            ? 'green' 
            : (data.urgency === 'emergency' ? 'red' : 'yellow');

    // üü¢ T·∫°o marker tr√≤n m√†u
    const marker = L.circleMarker([lat, lng], {
        color: color,
        fillColor: color,
        fillOpacity: 0.75,
        radius: 10,
        className: `${type}-marker`
    }).addTo(this.markerLayer);

    // üìç N·ªôi dung popup
    const popupContent = type === 'helper' 
        ? `
            <div class="text-center p-3 min-w-[200px]">
                <div class="font-bold text-green-700 mb-2">ü§ù T√¨nh Nguy·ªán Vi√™n</div>
                <div class="text-sm mb-1"><strong>Khu v·ª±c:</strong> ${data.area ? this.getDistrictName(data.area) : 'TP.HCM'}</div>
                <div class="text-sm mb-1"><strong>H·ªó tr·ª£:</strong> ${data.support_type || 'Ch∆∞a x√°c ƒë·ªãnh'}</div>
                ${addressUsed ? `<div class="text-xs text-gray-600 mt-2">üìç ${addressUsed}</div>` : ''}
                <div class="text-xs text-gray-500 mt-2">${new Date(data.timestamp).toLocaleDateString('vi-VN')}</div>
            </div>
        `
        : `
            <div class="text-center p-3 min-w-[200px]">
                <div class="font-bold ${data.urgency === 'emergency' ? 'text-red-700' : 'text-yellow-600'} mb-2">
                    ${data.urgency === 'emergency' ? 'üö® C·∫ßn H·ªó Tr·ª£ Kh·∫©n C·∫•p' : 'üíõ C·∫ßn Tr√≤ Chuy·ªán'}
                </div>
                <div class="text-sm mb-1"><strong>Khu v·ª±c:</strong> ${data.district ? this.getDistrictName(data.district) : 'TP.HCM'}</div>
                ${data.description ? `<div class="text-sm mb-1"><strong>M√¥ t·∫£:</strong> ${data.description}</div>` : ''}
                ${addressUsed ? `<div class="text-xs text-gray-600 mt-2">üìç ${addressUsed}</div>` : ''}
                <div class="text-xs text-gray-500 mt-2">${new Date(data.timestamp).toLocaleDateString('vi-VN')}</div>
            </div>
        `;

    // ü™Ñ G·∫Øn popup v√† hi·ªáu ·ª©ng hover
    marker.bindPopup(popupContent);
    marker.on('mouseover', function() {
        this.openPopup();
    });
    marker.on('mouseout', function() {
        this.closePopup();
    });
}

    getDistrictName(value) {
        const districtNames = {
            'quan1': 'Qu·∫≠n 1',
            'quan3': 'Qu·∫≠n 3',
            'quan4': 'Qu·∫≠n 4',
            'quan5': 'Qu·∫≠n 5',
            'quan6': 'Qu·∫≠n 6',
            'quan7': 'Qu·∫≠n 7',
            'quan8': 'Qu·∫≠n 8',
            'quan10': 'Qu·∫≠n 10',
            'quan11': 'Qu·∫≠n 11',
            'quan12': 'Qu·∫≠n 12',
            'binhThanh': 'Qu·∫≠n B√¨nh Th·∫°nh',
            'goVap': 'Qu·∫≠n G√≤ V·∫•p',
            'tanBinh': 'Qu·∫≠n T√¢n B√¨nh',
            'tanPhu': 'Qu·∫≠n T√¢n Ph√∫',
            'phuNhuan': 'Qu·∫≠n Ph√∫ Nhu·∫≠n',
            'thuDuc': 'Th√†nh ph·ªë Th·ªß ƒê·ª©c',
            'binhTan': 'Qu·∫≠n B√¨nh T√¢n',
            'nhaBe': 'Huy·ªán Nh√† B√®',
            'binhChanh': 'Huy·ªán B√¨nh Ch√°nh',
            'cuChi': 'Huy·ªán C·ªß Chi',
            'hocMon': 'Huy·ªán H√≥c M√¥n',
            'canGio': 'Huy·ªán C·∫ßn Gi·ªù',
            'other': 'Khu v·ª±c kh√°c',
            'online': 'H·ªó tr·ª£ tr·ª±c tuy·∫øn',
            'allDistricts': 'T·∫•t c·∫£ khu v·ª±c TP.HCM'
        };
        return districtNames[value] || value;
    }

    addDynamicMarkers() {
        if (!this.map) return;

        if (this.markerLayer) this.map.removeLayer(this.markerLayer);
        this.markerLayer = L.layerGroup().addTo(this.map);

        const helpers = JSON.parse(localStorage.getItem('hopeMapHelpers') || '[]');
        const requests = JSON.parse(localStorage.getItem('hopeMapRequests') || '[]');

        console.log(`üìç ƒêang th√™m ${helpers.length} t√¨nh nguy·ªán vi√™n v√† ${requests.length} y√™u c·∫ßu h·ªó tr·ª£`);

        // Th√™m markers v·ªõi delay ƒë·ªÉ tr√°nh block UI
        helpers.forEach((helper, index) => {
            setTimeout(() => {
                this.addMarkerWithAddress(helper, 'helper');
            }, index * 100);
        });

        requests.forEach((req, index) => {
            setTimeout(() => {
                this.addMarkerWithAddress(req, 'request');
            }, helpers.length * 100 + index * 100);
        });
    }
    resetAllData() {
        localStorage.removeItem('hopeMapHelpers');
        localStorage.removeItem('hopeMapRequests');
        localStorage.removeItem('hopeMapUserLocation');
        alert('üîÑ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i. B·∫£n ƒë·ªì s·∫Ω l√†m m·ªõi.');
        location.reload();
    }

    loadSampleData() {
        this.sampleChatMessages = {
            general: [
                { user: "Ng∆∞·ªùi d√πng A", message: "Ch√†o m·ªçi ng∆∞·ªùi! H√¥m nay th·∫ø n√†o?", time: "10:30", isVolunteer: false },
                { user: "Minh T√¢m", message: "Ch√†o b·∫°n! M√¨nh l√† t√¨nh nguy·ªán vi√™n, c√≥ g√¨ m√¨nh c√≥ th·ªÉ gi√∫p b·∫°n kh√¥ng? üíô", time: "10:31", isVolunteer: true },
            ],
            support: [
                { user: "Lan Anh", message: "Xin ch√†o! M√¨nh ·ªü ƒë√¢y ƒë·ªÉ l·∫Øng nghe v√† h·ªó tr·ª£ m·ªçi ng∆∞·ªùi ü§ó", time: "09:15", isVolunteer: true },
                { user: "Ng∆∞·ªùi d√πng D", message: "M√¨nh ƒëang h∆°i bu·ªìn...", time: "09:20", isVolunteer: false },
                { user: "Qu·ªëc B·∫£o", message: "M√¨nh hi·ªÉu c·∫£m gi√°c c·ªßa b·∫°n. B·∫°n kh√¥ng ƒë∆°n ƒë·ªôc ƒë√¢u üíô", time: "09:21", isVolunteer: true },
            ],
            recovery: [
                { user: "Ng∆∞·ªùi d√πng E", message: "H√¥m nay tr√≤n 1 th√°ng m√¨nh kh√¥ng lo √¢u!", time: "08:45", isVolunteer: false },
                { user: "H·ªìng Nhung", message: "Ch√∫c m·ª´ng b·∫°n! ƒê√¢y l√† m·ªôt th√†nh t√≠ch tuy·ªát v·ªùi üéâ", time: "08:46", isVolunteer: true },
            ]
        };
    }
}

window.addEventListener('load', () => {
    localStorage.removeItem('hopeMapHelpers');
    localStorage.removeItem('hopeMapRequests');
});